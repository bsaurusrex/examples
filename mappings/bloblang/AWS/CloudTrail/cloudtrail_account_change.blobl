# this is a metadata tag with no whitespace so we can split the data into the correct topic later 
meta ocsf_topic = "account_change"

root.class_uid = 3001
root.class_name = "Account Change"
root.category_uid = 3
root.category_name = "Identity & Access Management"
root.cloud.provider = "AWS"
root.severity_id = 1
root.severity = "Informational"
root.status_id = match this.ConsoleLogin.responseElements.ConsoleLogin {
        "Unknown" => 0
	    "Success" => 1
	    "Failure" => 2
	    "Other" => 99
    }
root.status = match this.ConsoleLogin.responseElements.ConsoleLogin {
        "Unknown" => "Unknown"
	    "Success" => "Success"
	    "Failure" => "Failure"
	    "Other" => "Other"
    }
root.activity_id = match {
        #1
        this.eventName.contains("Create") => 1
        this.eventName == "ResyncMFADevice" => 1
        this.eventName == "EnableMFADevice" => 1
        #3
        this.eventName == "ChangePassword" => 3
        this.eventName == "PasswordUpdated" => 3
        #7
        this.eventName.contains("Attach") => 7
        this.eventName.contains("Put") => 7
        this.eventName == "AddUserToGroup" => 7
        #8
        this.eventName.contains("Detach") => 8
        this.eventName.contains("Remove") => 8
        #99
        this.eventName.contains("DeleteSSH") => 99
        this.eventName.contains("DeleteServer") => 99
        this.eventName.contains("DeleteSign") => 99
        this.eventName.contains("DeleteAccount") => 99
        this.eventName.contains("DeleteCloudFront") => 99
        this.eventName.contains("DeleteService") => 99
        #6 Delete this is placed last in the list so if the others do not match it will (keep this at the end of the match statement)
        this.eventName.contains("Delete") => 6
        _ => 99
    }
root.activity_name = match {
        # "Delete"
        #this.eventName.contains("Delete") => "Delete"
        # "Attach Policy"
        this.eventName.contains("Attach") => "Attach Policy"
        this.eventName.contains("Put") => "Attach Policy"
        this.eventName == "AddUserToGroup" => "Attach Policy"
        # "Create"
        this.eventName.contains("Create") => "Create"
        this.eventName == "ResyncMFADevice" => "Create"
        this.eventName == "EnableMFADevice" => "Create"
        # "Detach Policy"
        this.eventName.contains("Detach") => "Detach Policy"
        this.eventName.contains("Remove") => "Detach Policy"
        # "Password Change"
        this.eventName == "ChangePassword" => "Password Change"
        this.eventName == "PasswordUpdated" => "Password Change"
        # "Other" this probably needs to be reviewed over time  
        this.eventName.contains("DeleteSSH") => "Other"
        this.eventName.contains("DeleteServer") => "Other"
        this.eventName.contains("DeleteSign") => "Other"
        this.eventName.contains("DeleteAccount") => "Other"
        this.eventName.contains("DeleteCloudFront") => "Other"
        this.eventName.contains("DeleteService") => "Other"
        # "Delete" this is placed last in the list so if the others do not match it will (keep this at the end of the match statement)
        this.eventName.contains("Delete") => "Delete"
        _ => "Other"
    }
root.type_uid = match {
        #1
        this.eventName.contains("Create") => 300101
        this.eventName == "ResyncMFADevice" => 300101
        this.eventName == "EnableMFADevice" => 300101
        #3
        this.eventName == "ChangePassword" => 300103
        this.eventName == "PasswordUpdated" => 300103
        #7
        this.eventName.contains("Attach") => 300107
        this.eventName.contains("Put") => 300107
        this.eventName == "AddUserToGroup" => 300107
        #8
        this.eventName.contains("Detach") => 300108
        this.eventName.contains("Remove") => 300108
        #99
        this.eventName.contains("DeleteSSH") => 300199
        this.eventName.contains("DeleteServer") => 300199
        this.eventName.contains("DeleteSign") => 300199
        this.eventName.contains("DeleteAccount") => 300199
        this.eventName.contains("DeleteCloudFront") => 300199
        this.eventName.contains("DeleteService") => 300199
        #6 Delete this is placed last in the list so if the others do not match it will (keep this at the end of the match statement)
        this.eventName.contains("Delete") => 300106
        _ => 300199
    }
root.type_name = match {
        #1
        this.eventName.contains("Create") => "Account Change: Create"
        this.eventName == "ResyncMFADevice" => "Account Change: Create"
        this.eventName == "EnableMFADevice" => "Account Change: Create"
        #3
        this.eventName == "ChangePassword" => "Account Change: Password Change"
        this.eventName == "PasswordUpdated" => "Account Change: Password Change"
        #7
        this.eventName.contains("Attach") => "Account Change: Attach Policy"
        this.eventName.contains("Put") => "Account Change: Attach Policy"
        this.eventName == "AddUserToGroup" => "Account Change: Attach Policy"
        #8
        this.eventName.contains("Detach") => "Account Change: Detach Policy"
        this.eventName.contains("Remove") => "Account Change: Detach Policy"
        #99
        this.eventName.contains("DeleteSSH") => "Account Change: Other"
        this.eventName.contains("DeleteServer") => "Account Change: Other"
        this.eventName.contains("DeleteSign") => "Account Change: Other"
        this.eventName.contains("DeleteAccount") => "Account Change: Other"
        this.eventName.contains("DeleteCloudFront") => "Account Change: Other"
        this.eventName.contains("DeleteService") => "Account Change: Other"
        #6 Delete this is placed last in the list so if the others do not match it will (keep this at the end of the match statement)
        this.eventName.contains("Delete") => "Account Change: Delete"
        _ => "Account Change: Other"
    }
root.time = this.eventTime.ts_unix_milli()
root.metadata.version = this.eventVersion
root.metadata.product.version = this.eventVersion
root.metadata.uid = this.eventID
root.metadata.product.name = "CloudTrail"
root.metadata.product.vendor_name = "AWS"
root.metadata.version = "1.0.0"
root.metadata.product.feature.name = this.eventCategory 
root.metadata.profiles = ["cloud"]
root.actor.user.account_uid = this.userIdentity.accountId
root.actor.user.credential_uid = this.userIdentity.accessKeyId.roleName
root.actor.user.type = this.userIdentity.type
root.actor.user.uid = this.userIdentity.principalId
root.actor.user.uuid = this.userIdentity.arn
root.actor.session.created_time = this.userIdentity.sessionContext.attributes.creationDate.ts_unix_milli()
root.actor.session.mfa = this.userIdentity.sessionContext.attributes.mfaAuthenticated
root.actor.session.issuer = this.userIdentity.sessionContext.sessionIssuer.arn
root.actor.invoked_by = this.userIdentity.invokedBy
root.actor.idp.name = this.userIdentity.webIdFederationData.federatedProvider
root.actor.idp.name	= this.userIdentity.identityProvider   
root.user.name = this.get(eventName).(responseElements.role.path|responseElements.role.description|requestParameters.userName|responseElements.role.roleName|responseElements.user.userName|requestParameters.roleName)
root.user.uid = this.userIdentity.principalId
root.src_endpoint.uid = this.vpcEndpointId 
root.src_endpoint.ip = this.sourceIPAddress
root.api.request.uid = this.requestID|""
root.api.service.name = this.eventSource
root.api.version = this.apiVersion
root.api.operation = this.eventName
root.api.response.error = this.errorCode
root.api.response.message = this.errorMessage
root.resources.uid = this.resources.0.ARN          
root.resources.account_uid = this.resources.0.accountId
root.resources.type = this.resources.0.type
root.cloud.region = this.awsRegion
root.http_request.user_agent = this.userAgent
root.unmapped = this.without(
    "userIdentity.accountId",
    "userIdentity.accessKeyId",
    "userIdentity.userName",
    "userIdentity.type",
    "userIdentity.principalId",
    "userIdentity.arn",
    "userIdentity.sessionContext.attributes.creationDate",
    "userIdentity.sessionContext.attributes.mfaAuthenticated",
    "userIdentity.sessionContext.sessionIssuer.arn",
    "userIdentity.invokedBy",
    "userIdentity.webIdFederationData.federatedProvider",
    "userIdentity.identityProvider",
    "vpcEndpointId",
    "requestID",
    "eventSource",
    "apiVersion",
    "eventName",
    "awsRegion",
    "userAgent",
    "eventVersion",
    "eventID",
    "eventTime",
    "errorCode",
    "errorMessage",
    "resources[].ARN", 
    "resources[].accountId", 
    "resources[].type",
    "ConsoleLogin",
    "userIdentity",
    "eventCategory",
    "roleName",
    "responseElements",
    "requestParameters",
    "sourceIPAddress",
    )
