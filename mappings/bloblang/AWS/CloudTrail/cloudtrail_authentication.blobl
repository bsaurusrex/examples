# this is a metadata tag with no whitespace so we can split the data into the correct topic later
meta ocsf_topic = "authentication"

root.class_uid = 3002
root.class_name = "Authentication"
root.category_uid = 3
root.category_name = "Identity & Access Management"
root.cloud.provider = "AWS"
root.severity_id = 1
root.severity = "Informational"
root.status_id = match this.responseElements.ConsoleLogin|serviceEventDetails.UserAuthentication {
        "Unknown" => 0
	    "Success" => 1
	    "Failure" => 2
	    "Other" => 99
	    _ => null
   }
root.status = this.responseElements.ConsoleLogin|serviceEventDetails.UserAuthentication
root.activity_id = match {
        this.eventName == "ConsoleLogin" => 1
        this.eventName == "ExternalIdPDirectoryLogin" => 1
        this.eventName == "UserAuthentication" => 1
        this.eventName.contains("AssumeRole") => 1
        _ => 99
    }
root.activity_name = match {
        this.eventName == "ConsoleLogin" => "Logon"
        this.eventName == "ExternalIdPDirectoryLogin" => "Logon"
        this.eventName == "UserAuthentication" => "Logon"
        this.eventName.contains("AssumeRole") => "Logon"
        _ => "Other"
    }
root.type_uid = match {
        this.eventName == "ConsoleLogin" => 300201
        this.eventName == "ExternalIdPDirectoryLogin" => 300201
        this.eventName == "UserAuthentication" => 300201
        this.eventName.contains("AssumeRole") => 300201
        _ => 300299
    }
root.type_name = match {
        this.eventName == "ConsoleLogin" => "Authentication: Logon"
        this.eventName == "ExternalIdPDirectoryLogin" => "Authentication: Logon"
        this.eventName == "UserAuthentication" => "Authentication: Logon"
        this.eventName.contains("AssumeRole") => "Authentication: Logon"
        _ => "Authentication: Other"
    }
root.time = this.eventTime.ts_unix_milli()
root.metadata.product.version = this.eventVersion
root.metadata.uid = this.eventID
root.metadata.product.name = "CloudTrail"
root.metadata.product.vendor_name = "AWS"
root.metadata.version = "1.0.0"
root.metadata.product.feature.name = this.eventCategory|"Management, Data, and Insights"
root.metadata.profiles = ["cloud"]
root.metadata.event_code = this.eventType
root.actor.user.account.uid = this.userIdentity.accountId
root.actor.user.credential_uid = this.userIdentity.accessKeyId
root.actor.user.name = this.userIdentity.userName 
root.actor.user.type = this.userIdentity.type
root.actor.user.uid_alt = this.userIdentity.principalId
root.actor.user.uid = this.userIdentity.arn
root.actor.session.created_time = this.userIdentity.sessionContext.attributes.creationDate.ts_unix_milli()|null
root.actor.session.is_mfa = this.userIdentity.sessionContext.attributes.mfaAuthenticated.bool()|null
root.is_mfa = match this.additionalEventData.MFAUsed {
    "Yes" => "true".bool()
    "No" => "false".bool()
    _ => null
}
root.actor.session.issuer = this.userIdentity.sessionContext.sessionIssuer.arn
root.actor.invoked_by = this.userIdentity.invokedBy
root.actor.idp.name = this.userIdentity.webIdFederationData.federatedProvider|identityProvider
root.session.uid = this.responseElements.assumedRoleUser.arn
root.session.uid_alt = this.responseElements.assumedRoleUser.assumedRoleId
root.session.credential_uid = this.responseElements.credentials.accessKeyId
root.session.issuer = this.responseElements.issuer|responseElements.provider
root.session.expiration_time = this.responseElements.credentials.expiration.ts_strptime("%b %d, %Y, %I:%M:%S %p").ts_unix_milli()|null
root.user.uid_alt = this.userIdentity.principalId
root.user.uid = this.requestParameters.roleArn|userIdentity.arn
root.user.name = this.requestParameters.roleSessionName|userIdentity.userName|""
root.user.type = this.resources.0.type
root.user.account.uid = this.resources.0.accountId
root.src_endpoint.uid = this.vpcEndpointId
root.src_endpoint = if this.sourceIPAddress.re_find_all_object("^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}$").length() > 0 {
    {"ip": this.sourceIPAddress}
} else {
    {"domain": this.sourceIPAddress}
}
root.dst_endpoint.svc_name = this.additionalEventData.LoginTo
root.api.request.uid = this.requestID|""
root.api.request.data = this.requestParameters
root.api.service.name = this.eventSource
root.api.version = this.apiVersion
root.api.operation = this.eventName
root.api.response.error = this.errorCode
root.api.response.message = this.errorMessage
root.api.response.data = this.responseElements
root.cloud.region = this.awsRegion
root.http_request.user_agent = this.userAgent
root.unmapped = this.without(
    "userIdentity.accountId",
    "userIdentity.accessKeyId",
    "userIdentity.userName",
    "userIdentity.type",
    "userIdentity.principalId",
    "userIdentity.arn",
    "userIdentity.sessionContext.attributes.creationDate",
    "userIdentity.sessionContext.attributes.mfaAuthenticated",
    "userIdentity.sessionContext.sessionIssuer.arn",
    "userIdentity.invokedBy",
    "userIdentity.webIdFederationData.federatedProvider",
    "userIdentity.identityProvider",
    "vpcEndpointId",
    "requestID",
    "eventSource",
    "apiVersion",
    "eventName",
    "awsRegion",
    "userAgent",
    "eventVersion",
    "eventID",
    "eventTime",
    "errorCode",
    "errorMessage",
    "resources[].ARN", 
    "resources[].accountId", 
    "resources[].type",
    "ConsoleLogin",
    "eventCategory",
    "sourceIPAddress",
    )